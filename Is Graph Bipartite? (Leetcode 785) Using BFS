class Solution {
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int colors[] = new int[n];
        Arrays.fill(colors , -1);
        for(int i = 0; i < n; i++) {
            if(colors[i] == -1) {
                Queue<Integer> q = new LinkedList<>();
                q.offer(i);
                colors[i] = 0;
                while(!q.isEmpty()) {
                   int x = q.poll();
                   int parentColor = colors[x];
                   for(int num : graph[x]) {
                      if((parentColor == 0 && colors[num] == 0) || (parentColor == 1 && colors[num] == 1)){
                          return false;
                      }
                      if((parentColor == 1 && colors[num] == 0) || (parentColor == 0 && colors[num] == 1)) {
                          continue;
                      }
                      else if(parentColor == 0 && colors[num] == -1) {
                          colors[num] = 1;
                          q.add(num);
                      }
                      else if(parentColor == 1 && colors[num] == -1) {
                          colors[num] = 0;
                          q.add(num);
                      }
                   }
                }
            }
        }       
        return true;
    }
}
